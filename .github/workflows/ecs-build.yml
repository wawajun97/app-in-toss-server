name: Build and Push Docker image to ECR

on:
  push:
    branches:
      - dev

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스코드 가져오기
      - name: Checkout source
        uses: actions/checkout@v4

      # 2. JDK 세팅 (Spring Boot 빌드용)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 3. AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ADMIN_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ADMIN_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 4. ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build with Gradle
        run: ./gradlew build
        
      # 5. Docker 이미지 빌드 & 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .                          # Dockerfile 위치
          file: ./Dockerfile                   # Dockerfile 경로
          push: true                           # ECR에 푸시
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.HEYLOCAL_REPOSITORY }}:latest

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: heylocal
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.HEYLOCAL_REPOSITORY }}:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

